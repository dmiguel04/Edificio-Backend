"""
Django settings for edificiobackend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import base64
import os
from dotenv import load_dotenv

# Cargar .env si existe (variables sensibles)
load_dotenv(BASE_DIR := Path(__file__).resolve().parent.parent / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sb-&l2*xlxbr3ta&*)_3i3y3!=(26hp7%z=xa-%^hcc*#5d2pe'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('1', 'true', 'yes')

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'testserver',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.usuarios',
    "rest_framework",
    "rest_framework_simplejwt",
    'rest_framework_simplejwt.token_blacklist',
    "corsheaders",  # opcional para frontend
    'apps.gestion_usuarios',
    'apps.finanzas',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # Debug middleware to print response bodies when DEBUG=True
    'edificiobackend.middleware.DebugResponseBodyMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

ROOT_URLCONF = 'edificiobackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'edificiobackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuración para PostgreSQL (producción)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'bdedificio',
        'USER': 'postgres',
        'PASSWORD': '12345',
        'HOST': 'localhost',  # o la IP/host de tu servidor PostgreSQL
        'PORT': '5432',       # puerto por defecto de PostgreSQL
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/La_Paz'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# AES key: 32 bytes (256 bits) base64-encoded in ENV
AES_KEY_B64 = os.environ.get("AES_KEY_B64", "MTIzNDU2Nzg5MDEyMzQ1Ng==")  # ej: "base64-encoded-32-bytes=="
if not AES_KEY_B64:
    raise Exception("Falta AES_KEY_B64 en las variables de entorno")

# decode key once
AES_KEY = base64.b64decode(AES_KEY_B64)

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '30/min',
        'user': '60/min',
    },
}

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOWED_ORIGINS = [
    "http://localhost:4200",
]

# Allow Authorization header and credentials for SPA
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(
    os.environ.get('CORS_ALLOW_HEADERS', 'authorization,content-type').split(',')
)

# Configuración de correo para envío de emails de verificación y recuperación
# En desarrollo usamos el backend de consola para evitar dependencias SMTP y
# que el envío de correos bloquee o falle tests/local dev. En producción se
# debe configurar la variable EMAIL_BACKEND en el entorno.
# Read email configuration from environment. Respect whatever is provided in
# the .env file so you can run SMTP in development if desired. Values are
# normalized (booleans/ints) and we strip accidental spaces inside passwords
# which commonly appear when copying app-passwords grouped for readability.
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')

EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
try:
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
except ValueError:
    EMAIL_PORT = 587

EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
# Remove spaces that may have been inserted when copying an App Password
raw_email_password = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_HOST_PASSWORD = raw_email_password.replace(' ', '')

EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() in ('1', 'true', 'yes')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@edificioapp.com')

# Stripe keys (from .env)
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET', '')

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),  # Token expira en 15 minutos
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

AUTH_USER_MODEL = 'usuarios.Usuario'

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
# Durante desarrollo local (DEBUG=True) evitamos marcar las cookies "secure"
# y otras cabeceras que pueden impedir que herramientas locales (stripe cli,
# ngrok, postman) hagan POSTs a localhost sin HTTPS. En producción DEBUG=False
# las dejamos activas.
if DEBUG:
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
else:
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

# Django usa esto por defecto para hashear contraseñas
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',     # PBKDF2-SHA256
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher', # PBKDF2-SHA1  
    'django.contrib.auth.hashers.ScryptPasswordHasher',     # Scrypt
]

# Valor por defecto para el rol asignado a nuevos registros de usuario.
# Debe coincidir con una de las opciones de `Role.choices` (ej. 'residente', 'personal', 'junta', 'admin')
DEFAULT_REGISTER_ROLE = 'residente'

# Media files for generated invoices/PDFs
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Limits (amounts in cents)
MAX_MANUAL_PAYMENT_AMOUNT = int(os.environ.get('MAX_MANUAL_PAYMENT_AMOUNT', 10000000))  # default 100,000.00
MAX_OVERDUE_CHARGE_AMOUNT = int(os.environ.get('MAX_OVERDUE_CHARGE_AMOUNT', 5000000))  # default 50,000.00